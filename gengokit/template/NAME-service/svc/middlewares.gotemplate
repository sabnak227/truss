// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package svc

// This file contains middlewares wrapping around endpoints from services,

import (
	"context"
	"fmt"
	"os"
	"time"

	"github.com/go-kit/kit/endpoint"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"
	"github.com/go-kit/kit/metrics/prometheus"
	stdprometheus "github.com/prometheus/client_golang/prometheus"
)

var logger log.Logger
var dur metrics.Histogram

func init() {
	fmt.Println("---------------------------------")
	fmt.Println("Initializing")
	fmt.Println("---------------------------------")
	{
		logger = log.NewLogfmtLogger(os.Stderr)
		logger = log.With(logger, "ts", log.DefaultTimestampUTC)
		logger = log.With(logger, "caller", log.DefaultCaller)
	}
	{
		dur = prometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
			Namespace: "{{ToLower .Service.Name}}_svc",
			Subsystem: "api",
			Name:      "request_duration_seconds",
			Help:      "Total time spent serving requests.",
		}, []string{})
	}
}

func WrapEndpoints(in Endpoints) Endpoints {

	in.WrapAllLabeledExcept(InstrumentingMiddleware(dur))
	in.WrapAllLabeledExcept(LoggingMiddleware(logger))

	return in
}

func InstrumentingMiddleware(duration metrics.Histogram) LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint {
		return func(ctx context.Context, req interface{}) (rsp interface{}, err error) {
			defer func(begin time.Time) {
				duration.Observe(time.Since(begin).Seconds())
			}(time.Now())
			return in(ctx, req)
		}
	}
}

func LoggingMiddleware(logger log.Logger) LabeledMiddleware {
	return func(name string, in endpoint.Endpoint) endpoint.Endpoint {
		return func(ctx context.Context, req interface{}) (rsp interface{}, err error) {
			defer func(begin time.Time) {
				logger.Log("endpoint", name, "input", req, "output", rsp, "err", err, "took", time.Since(begin))
			}(time.Now())
			return in(ctx, req)
		}
	}
}
