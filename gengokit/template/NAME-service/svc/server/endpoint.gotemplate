// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (

	// 3d Party
	"github.com/go-kit/kit/log"
	stdzipkin "github.com/openzipkin/zipkin-go"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /svc"
	"{{.ImportPath -}} /handlers"
	"{{.ImportPath -}} /middlewares"
)

func NewEndpoints(logger log.Logger, zipkinTracer *stdzipkin.Tracer) svc.Endpoints {
	// Business domain.
	var service pb.{{.Service.Name}}Server
	{
		service = handlers.NewService(logger, zipkinTracer)
		// Wrap Service with default middlewares. See svc/middlewares.go
		service = wrapService(service)
		// Wrap Service with middlewares. See handlers/middlewares.go
		service = handlers.WrapService(service)
	}

	// Endpoint domain.
	var (
	{{range $i := .Service.Methods -}}
		{{ToLower $i.Name}}Endpoint = svc.Make{{$i.Name}}Endpoint(service)
	{{end}}
	)

	endpoints := svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.Name}}Endpoint:    {{ToLower $i.Name}}Endpoint,
	{{end}}
	}

	// Wrap default middlewares
    endpoints = wrapEndpoints(endpoints)
    // Wrap selected Endpoints with middlewares. See handlers/middlewares.go
    endpoints = handlers.WrapEndpoints(endpoints)

	return endpoints
}

func wrapEndpoints(in svc.Endpoints) svc.Endpoints {
	in.WrapAllLabeledExcept(middlewares.LoggingMiddleware(logger))

	return in
}

func wrapService(in pb.{{.Service.Name}}Server) pb.{{.Service.Name}}Server {
	in = middlewares.TracingMiddleware(zipkinTracer)(in)
	in = middlewares.InstrumentationMiddleware(requestCount, errCount, requestLatency)(in)
	return in
}