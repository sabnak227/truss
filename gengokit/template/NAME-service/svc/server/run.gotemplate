// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: {{.Version}}
// Version Date: {{.VersionDate}}

package server

import (
    "flag"
    "os"
    "fmt"
	"net"
	"net/http"
	"net/http/pprof"

	// 3d Party
	"google.golang.org/grpc"
	"github.com/go-kit/kit/log"
    "github.com/go-kit/kit/metrics"
    "github.com/go-kit/kit/metrics/prometheus"
    stdzipkin "github.com/openzipkin/zipkin-go"
    zipkinhttp "github.com/openzipkin/zipkin-go/reporter/http"
    stdprometheus "github.com/prometheus/client_golang/prometheus"
    "github.com/prometheus/client_golang/prometheus/promhttp"

	// This Service
	pb "{{.PBImportPath -}}"
	"{{.ImportPath -}} /svc"
	"{{.ImportPath -}} /handlers"
)

var (
	DefaultConfig Config
	logger         log.Logger
	requestCount   metrics.Counter
    errCount       metrics.Counter
    requestLatency metrics.Histogram
	zipkinTracer   *stdzipkin.Tracer
)

func init() {
	flag.StringVar(&DefaultConfig.MetricAddr, "metric.addr", ":5070", "Metrics listen address")
	flag.StringVar(&DefaultConfig.DebugAddr, "debug.addr", ":5060", "Debug listen address")
	flag.StringVar(&DefaultConfig.HTTPAddr, "http.addr", ":5050", "HTTP listen address")
	flag.StringVar(&DefaultConfig.GRPCAddr, "grpc.addr", ":5040", "gRPC (HTTP) listen address")
	flag.StringVar(&DefaultConfig.ZipkinUrl, "zipkin.url", "http://localhost:9411/api/v2/spans", "Zipkin url")

	// Use environment variables, if set. Flags have priority over Env vars.
	if addr := os.Getenv("DEBUG_ADDR"); addr != "" {
		DefaultConfig.DebugAddr = addr
	}
	if addr := os.Getenv("METRIC_ADDR"); addr != "" {
		DefaultConfig.MetricAddr = addr
	}
	if port := os.Getenv("PORT"); port != "" {
		DefaultConfig.HTTPAddr = fmt.Sprintf(":%s", port)
	}
	if addr := os.Getenv("HTTP_ADDR"); addr != "" {
		DefaultConfig.HTTPAddr = addr
	}
	if addr := os.Getenv("GRPC_ADDR"); addr != "" {
		DefaultConfig.GRPCAddr = addr
	}
}

// Config contains the required fields for running a server
type Config struct {
	HTTPAddr string
	DebugAddr string
	MetricAddr string
	GRPCAddr string
	ZipkinUrl  string
}

// Run starts a new http server, gRPC server, and a debug server with the
// passed config and logger
func Run(cfg Config) {
    fmt.Println("---------------------------------")
    fmt.Println("Initializing")
    fmt.Println("---------------------------------")

    {
        logger = log.NewLogfmtLogger(os.Stderr)
        logger = log.With(logger, "ts", log.DefaultTimestampUTC)
        logger = log.With(logger, "caller", log.DefaultCaller)
    }

	fieldKeys := []string{"method", "error"}

    {
        requestCount = prometheus.NewCounterFrom(stdprometheus.CounterOpts{
            Namespace: "{{ToLower .Service.Name}}_service",
            Subsystem: "api",
            Name:      "request_count",
            Help:      "Number of requests received.",
        }, fieldKeys)
    }

    {
        errCount = prometheus.NewCounterFrom(stdprometheus.CounterOpts{
            Namespace: "{{ToLower .Service.Name}}_service",
            Subsystem: "api",
            Name:      "error_count",
            Help:      "Number of error received.",
        }, fieldKeys)
    }

    {
        requestLatency = prometheus.NewSummaryFrom(stdprometheus.SummaryOpts{
            Namespace: "{{ToLower .Service.Name}}_service",
            Subsystem: "api",
            Name:      "request_duration_seconds",
            Help:      "Total time spent serving requests.",
        }, fieldKeys)
    }

    {
        var (
            err         error
            hostPort    = "localhost:80"
            serviceName = "{{ToLower .Service.Name}}-service"
			reporter    = zipkinhttp.NewReporter(cfg.ZipkinUrl)
        )
        defer reporter.Close()
        zEP, _ := stdzipkin.NewEndpoint(serviceName, hostPort)
        zipkinTracer, err = stdzipkin.NewTracer(reporter, stdzipkin.WithLocalEndpoint(zEP))
        if err != nil {
            logger.Log("err", err)
            os.Exit(1)
        }
    }

    fmt.Println("---------------------------------")
    fmt.Println("Done Initializing")
    fmt.Println("---------------------------------")

	endpoints := NewEndpoints(logger, zipkinTracer)

	// Mechanical domain.
	errc := make(chan error)

	// Interrupt handler.
	go handlers.InterruptHandler(errc)

	// Debug listener.
	go func() {
		logger.Log("transport", "debug", "addr", cfg.DebugAddr)

		m := http.NewServeMux()
		m.Handle("/debug/pprof/", http.HandlerFunc(pprof.Index))
		m.Handle("/debug/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
		m.Handle("/debug/pprof/profile", http.HandlerFunc(pprof.Profile))
		m.Handle("/debug/pprof/symbol", http.HandlerFunc(pprof.Symbol))
		m.Handle("/debug/pprof/trace", http.HandlerFunc(pprof.Trace))

		errc <- http.ListenAndServe(cfg.DebugAddr, m)
	}()

	// Metric listener.
	go func() {
		logger.Log("transport", "metric", "addr", cfg.MetricAddr)

		m := http.NewServeMux()
		
		m.Handle("/metrics", promhttp.Handler())

		errc <- http.ListenAndServe(cfg.MetricAddr, m)
	}()

	// HTTP transport.
	go func() {
		logger.Log("transport", "HTTP", "addr", cfg.HTTPAddr)
		h := svc.MakeHTTPHandler(endpoints, zipkinTracer)
		errc <- http.ListenAndServe(cfg.HTTPAddr, h)
	}()

	// gRPC transport.
	go func() {
		logger.Log("transport", "gRPC", "addr", cfg.GRPCAddr)
		ln, err := net.Listen("tcp", cfg.GRPCAddr)
		if err != nil {
			errc <- err
			return
		}

		srv := svc.MakeGRPCServer(endpoints, zipkinTracer)
		s := grpc.NewServer()
		pb.Register{{.Service.Name}}Server(s, srv)

		errc <- s.Serve(ln)
	}()

	// Run!
	logger.Log("exit", <-errc)
}

