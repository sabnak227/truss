// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/cmd/NAME/main.gotemplate (356B)
// NAME-service/handlers/handlers.gotemplate (62B)
// NAME-service/handlers/hooks.gotemplate (62B)
// NAME-service/handlers/middlewares.gotemplate (75B)
// NAME-service/svc/client/grpc/client.gotemplate (3.184kB)
// NAME-service/svc/client/http/client.gotemplate (105B)
// NAME-service/svc/endpoints.gotemplate (4.272kB)
// NAME-service/svc/middlewares.gotemplate (3.375kB)
// NAME-service/svc/server/endpoint.gotemplate (1.571kB)
// NAME-service/svc/server/run.gotemplate (4.844kB)
// NAME-service/svc/transport_grpc.gotemplate (3.158kB)
// NAME-service/svc/transport_http.gotemplate (106B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdNameMainGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\x31\x6f\x83\x30\x14\x84\x67\xde\xaf\x38\x31\xc1\x50\xbc\x77\x0d\x1d\xb2\x34\x51\x9a\x76\x77\xe0\x00\xab\xc4\x20\xdb\x10\x45\xc8\xff\xbd\x82\x44\x55\xa6\x77\x4f\x77\xba\x4f\xef\x29\x85\xdd\x50\x13\x2d\x2d\x9d\x0e\xac\x71\xb9\x23\xb8\xc9\xfb\x02\xe5\x01\x9f\x87\x33\x3e\xca\xfd\xb9\x10\xa5\x70\xa2\x9b\xac\x35\xb6\x7d\x04\x70\x33\x7d\x8f\x61\xa6\xbb\x39\x13\x88\xd0\x19\x8f\xc6\xf4\xdc\xc2\x3f\x74\xde\x0c\xf6\x1d\xcb\x52\x3c\x75\x8c\x2f\x06\x4a\x1d\xf8\xea\xae\x7b\x8c\x22\xa3\xae\x7e\x75\x4b\x5c\xb5\xb1\x22\xe6\x3a\x0e\x2e\x20\x93\x24\x6d\x7a\xdd\xa6\x22\x89\x52\x38\xaf\xa8\x2f\xba\xd9\x54\x94\x24\x5d\x96\x62\xbf\xe5\x8e\x3a\x74\x78\x8b\x11\xca\xcf\x95\xf2\x74\x33\x5d\x2a\xb9\x48\x33\xd9\x6a\x6b\xcc\x72\x2c\x5b\xc5\xf7\x58\xeb\x40\xe8\xba\x76\xf4\x9e\x1e\xa6\x41\xe8\x78\x47\xa7\x67\xe2\x42\xda\xff\xd3\x02\xed\xfa\x95\x95\xef\x25\x59\x47\x71\xd4\xce\x33\xcb\x45\x92\x07\xa4\x38\x4d\x36\x7b\xca\x92\x8d\x9e\xfa\xb0\x1b\x6c\x63\xda\x5c\xa2\xfc\x05\x00\x00\xff\xff\x49\xa3\x9c\x96\x64\x01\x00\x00")

func cmdNameMainGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_cmdNameMainGotemplate,
		"cmd/NAME/main.gotemplate",
	)
}

func cmdNameMainGotemplate() (*asset, error) {
	bytes, err := cmdNameMainGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/NAME/main.gotemplate", size: 356, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3c, 0xd, 0xff, 0x1e, 0xe5, 0xa9, 0x62, 0x3d, 0xb4, 0x16, 0xf5, 0xfd, 0x84, 0x56, 0x3e, 0xc4, 0x7d, 0x9e, 0x50, 0x8f, 0x7b, 0xc0, 0xcc, 0x27, 0x7f, 0xe7, 0x57, 0x20, 0x66, 0xd, 0x77, 0x87}}
	return a, nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersHooksGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHooksGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHooksGotemplate,
		"handlers/hooks.gotemplate",
	)
}

func handlersHooksGotemplate() (*asset, error) {
	bytes, err := handlersHooksGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/hooks.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xfd\xf7\xc5\x90\x94\x23\x27\x8e\xdb\x43\x10\x8b\xf3\x38\x1f\xef\x0d\x39\x9c\x4e\x61\x6e\x2a\x84\x1a\x35\x5a\xe1\xb1\x82\x87\x3d\x78\xbb\x75\x8e\xc3\xcd\x67\xb8\xfd\x7c\x0f\xef\x6f\x3e\xde\x73\x36\x9d\xc2\x1d\xda\xad\xd6\x4a\xd7\x11\x00\x8f\xaa\x69\xc0\xec\xd0\x3e\x5a\xe5\x11\xfc\x4a\x39\x58\xaa\x06\x03\xf8\x2b\x5a\xa7\x8c\xbe\x86\xae\xe3\xe9\x77\xdf\x8f\x0c\x70\x23\x3c\x8e\xad\xf4\xdd\xf7\x8c\x20\x0b\x21\xd7\xa2\x46\xa8\x6d\x2b\xa1\xb5\x66\xa7\x2a\x74\x20\xa0\xbe\x5b\xcc\x41\x36\x0a\xb5\x87\xa5\xb1\xe0\x57\x48\x0e\xbe\xa0\xdd\x29\x89\xfc\x56\x6c\xb0\xef\xc1\xa5\x4f\xd6\x8e\xdc\x30\xa6\x36\xad\xb1\x1e\x72\x96\x4d\xa4\xd1\x1e\x9f\xfc\x84\x65\x93\xda\x98\xba\x41\x5e\x9b\x46\xe8\x9a\x1b\x5b\x4f\x09\xfd\xb6\x65\xba\x41\x2f\x2a\xe1\x45\x80\x28\xbf\xda\x3e\x70\x69\x36\xd3\x76\x5d\x4f\xd1\x5a\x63\xdd\x84\x1d\x5b\x6a\x73\xb5\x56\x7e\x4a\x7f\xa8\xab\xd6\x28\x4d\x81\xc9\x97\xb7\x42\xbb\x90\xd4\x1b\xf8\x03\x20\x25\xc5\xb2\xe9\x14\xee\x89\xe6\x54\x32\xcb\x26\x5d\xc7\x3f\x86\xca\x16\xc2\xaf\xe0\xaa\xef\x61\xea\x76\x54\x40\xfb\x00\x64\x5c\xbc\x3b\x36\x4f\x58\x11\x38\xbe\xc5\x47\xb0\xe8\xb7\x56\x3b\x10\x7a\x20\x0d\x1e\x84\x5c\xc7\x26\x38\xa6\x5b\x1a\xad\x51\x7a\x65\x34\x87\x8f\x1e\x94\x23\xf2\xc9\x8f\x45\xd7\x1a\xed\xd4\x83\x6a\x94\xdf\x83\x59\x06\x55\xa4\x68\x1a\xb4\xe0\x0d\x54\x4a\x34\x25\x08\x5d\x41\x23\x3c\x5a\x90\x8d\x71\x58\x46\xd0\xb3\x4f\xb6\xdc\x6a\x49\x39\xe5\xb4\x08\x97\x54\x2f\x9f\x87\xd0\x73\xa3\x75\x09\xa6\x25\x9c\x03\xce\xd3\xf2\xe7\xb0\x50\x40\xde\x3e\xf0\x57\x3d\x40\x5f\x68\x4b\x08\x8a\x14\xd0\xb1\x6c\x27\x2c\x48\x99\xaa\x99\x1b\xbd\x54\x35\x63\x19\x35\xd1\x8f\x12\x96\x70\x3d\x03\x2b\x74\x8d\x87\x38\x1d\xcb\x32\xb4\x96\x0c\xcb\xfc\x4f\x29\x0b\x96\x65\x6a\x49\x0e\xe1\x8f\x19\x68\xd5\x04\x44\x16\x19\xa4\xef\x14\xcc\xf1\xff\xac\x68\x73\xb4\xb6\x84\x89\x14\x5a\x1b\x0f\xa2\x6d\x9b\x7d\xf2\x3c\x21\x47\x3d\xcb\x7a\xc6\x32\x39\x2a\xc4\x51\xa4\x6f\xdf\x8f\xda\xe2\xa8\x52\x0a\x77\xca\xfa\x0e\x97\xc6\x62\x4e\xc9\xa4\xb6\xfe\x2a\x9a\x2d\xba\x7b\xf3\xe1\x6e\x31\xff\x94\xba\x35\x97\x92\xaf\x50\x54\x68\x5d\x51\x94\x14\x3e\xeb\xba\x2b\x78\x54\x7e\x05\x17\x1e\x29\x38\xef\x7b\x96\x8d\x56\xdb\x75\x4d\x64\x92\xe9\xc2\x23\x4f\x67\x32\xf2\x4b\xd1\x08\x19\x39\xbb\x50\x03\x68\x50\xe1\x13\xfa\x95\xa9\x5c\x04\x06\xee\xbb\xee\xde\xfc\x6b\x1e\xd1\xc2\x85\x4a\x22\xbd\x4f\xa7\x01\x86\x63\xc1\x87\x95\xb0\x2b\xf0\x4b\x61\xde\xde\x38\x83\x63\x46\x6e\xf1\x31\x92\x92\xc7\xbd\xc4\x88\x2e\xd3\xef\x49\xd7\x0d\x35\xf5\x3d\xef\xba\x71\xbe\x71\x71\x32\x86\xaa\x97\x8b\xef\xb5\x34\x15\x12\xa9\x23\xeb\x1d\xfe\xdc\xa2\xf3\x03\xe6\x06\x4f\x62\xc2\x09\xc1\x01\x14\x1a\xf6\x83\x09\xe4\x5e\x28\x3e\x98\xef\xf7\xed\x90\x48\xd7\x0f\xd8\xa3\x16\xe1\x9c\xa7\xf5\xe2\x40\x55\x5e\x84\x95\xa4\x08\xea\x2a\xa9\x98\x7e\x0d\x3f\xd8\xd0\xa9\x6e\x27\x0f\x7b\x5d\x47\x80\xb1\x86\x2f\x05\xa4\x0b\x23\xb8\x7b\xc5\xfd\x35\x00\x9c\x13\xb5\x7c\x8e\x9d\xf5\x25\x1d\x10\x16\xef\x76\x22\x07\xa2\x4a\x10\xe9\x62\xe7\x73\x88\x53\xe3\x2c\xb3\x74\x1d\x09\x38\xbe\x2d\x79\xdc\x31\x40\xfe\xa6\xfb\xc5\xaf\x44\xb8\xc9\x76\x68\xbd\x03\x41\x7e\xc3\x1d\x77\xa2\x0e\xb0\x48\x87\xd6\x1b\x10\xb0\x75\x68\xaf\x2a\xb3\x11\x4a\xbf\x01\x8d\x31\x38\x2c\xac\xda\x08\xab\x9a\x3d\xed\x59\x6e\x1b\x50\x1a\x44\xba\x74\xd2\x1d\x77\xb6\x90\xfc\x07\xa4\x43\xcc\xe7\xf1\x7f\x19\x5a\xfc\x2e\x24\xa3\xb4\x47\xbb\x14\x12\xbb\xbe\x80\x7c\xf4\x35\xbe\xe8\x62\xde\xd7\xb3\xe7\x7d\x3c\xbf\xfc\x75\xcb\x15\x87\x0e\x09\x0e\x06\xc5\x0e\xfd\xf3\x42\xb9\x78\x18\x7e\x4b\xb9\x73\xe7\xe6\xa4\x70\x71\x43\x42\xbc\xa5\xdb\xaf\x35\x89\x01\x82\x80\x67\x44\x0e\xa8\xdf\x12\xee\x5c\x1d\xa7\x74\x1b\x32\xf8\x4d\xd5\x7e\x86\x19\x94\xf2\x39\xa1\x58\x30\xbc\x21\xd8\xcf\x57\x72\x31\xbf\x6f\xf1\x68\xda\x81\xf3\x76\x2b\x3d\x05\x4b\x83\x00\xbe\x7d\x77\xde\x2a\x5d\xa7\x93\x39\x9e\x36\x51\x18\xaa\x3b\x7c\x05\x01\x36\xa6\x52\x4b\x85\x2e\xce\xee\xc3\xb3\x80\x26\x69\x88\x76\xb4\x9f\xb6\xe6\x97\xe3\x04\x8a\x58\x2e\x8b\x6c\xce\xfd\xd3\x30\xa7\xbe\xa0\xae\xf2\x35\xee\xc3\x70\x8f\x19\x15\xc7\xce\xba\x43\xad\xc1\xad\x81\x53\x8e\xc3\x40\x36\xc3\x94\x83\x19\x90\x4b\x36\x1e\xd1\x34\xf6\xfa\x14\xff\xdc\xac\x0c\xb9\x0c\xe4\x14\x70\x6a\xea\x8e\xbb\xf3\x45\x76\xd2\x3f\xbd\x6e\x86\x4d\x05\x97\xc3\xcb\x91\x7f\xba\x29\x5e\x22\x42\xf2\x34\x27\x5b\xa1\xc6\xca\x64\xc3\x13\x65\xfd\xfc\x44\x09\xe9\x85\xe9\xa8\x96\xb0\x2b\xc1\x04\x9b\xf4\x4f\x3c\x54\x93\xaf\x0b\x9e\xa7\xdc\xff\x22\x63\x1c\xa4\xd1\xf1\x8c\x1e\x23\xc4\x77\xf8\x2c\x61\x5d\xc2\x2e\x4c\x90\x3e\x3c\x4b\xe2\x23\x27\x42\xc7\xcf\x9c\xcb\x4d\x05\x33\x38\x14\xf0\x8f\x51\x3a\xbf\xdc\x54\xe5\xf3\xd2\x82\xf6\x44\xaf\x9c\xf3\xa2\x18\xdc\x25\x66\xa4\x7f\x8a\xec\xff\x1f\x00\x00\xff\xff\x00\xce\x0e\xa6\x70\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3184, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x72, 0x1f, 0xe5, 0x3a, 0x45, 0x1, 0x91, 0xd8, 0x5b, 0xa8, 0x47, 0x45, 0x45, 0x98, 0xee, 0x0, 0xf5, 0xc1, 0x3c, 0x43, 0xf0, 0x86, 0x3c, 0xec, 0xbe, 0x2d, 0x84, 0xed, 0x1a, 0x17, 0x6c}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xdc\x38\x12\x3d\x4b\xbf\xa2\x22\x78\xe1\xee\x40\xa6\xef\x0e\x7c\xd8\x4d\xbc\xbb\x06\x36\x1f\x88\xbd\xbb\x87\x20\x08\xd8\x52\xa9\x45\x98\x22\x19\x92\xea\x76\x8f\xa0\xff\x3e\x28\x52\x52\xab\xd3\x4a\x26\x33\xc7\xc1\x1c\x0c\xdb\xfc\x78\x7c\xf5\xaa\xea\x91\xba\xbe\x86\xd7\xba\x44\xd8\xa2\x42\xcb\x3d\x96\xb0\x39\x80\xb7\xad\x73\x0c\xde\xbc\x87\x77\xef\x1f\xe1\xee\xcd\xfd\x23\x4b\xaf\xaf\xe1\x23\xda\x56\x29\xa1\xb6\x71\x01\xec\x85\x94\xa0\x77\x68\xf7\x56\x78\x04\x5f\x0b\x07\x95\x90\x18\x16\xff\x0f\xad\x13\x5a\xdd\x40\xd7\xb1\xe1\xef\xbe\x9f\x4d\xc0\x1b\xee\x71\x3e\x4b\xff\xf7\x7d\x9a\x1a\x5e\x3c\xf1\x2d\x82\xdb\x15\x29\xad\x7f\x1c\x61\xa1\xd0\xca\x73\xa1\x1c\x34\xe8\x6b\x5d\x3a\xf0\x1a\x1a\xfe\x84\x20\x54\x29\x76\xa2\x6c\xb9\x04\x54\xa5\xd1\x42\x79\x07\x95\xd5\x0d\x38\xb4\x3b\x51\xa0\xcb\x09\xc9\xe2\xd7\x16\x9d\x07\xae\x4a\xb0\xe8\x8c\x56\x0e\xc1\x1f\x0c\x06\x24\x5a\x4a\x41\x68\x87\x47\x94\x1c\xb8\x83\x3d\x4a\x49\xbf\x51\x15\xba\x44\xeb\x08\x80\xf0\x4a\x1c\xfe\xaf\xb4\x1d\x36\x06\xb4\x3c\x0c\x70\x12\xa7\x02\xdd\x5a\x70\xad\x31\xda\x92\xb8\xde\x72\xe5\xe8\x6f\x3a\x4e\x70\x29\x7e\xe1\x5e\x68\x45\x68\x95\xb6\x0d\xf7\x8e\xa5\xa9\x68\xc2\x8a\x55\x9a\x64\x55\xe3\xb3\x34\xc9\x28\x72\x7c\xf6\x59\x9a\x26\xd9\x56\xf8\xba\xdd\xb0\x42\x37\xd7\x5b\x7d\xf5\x24\xfc\x35\xfd\x8c\x8c\x69\x89\xd9\x40\xd6\x75\xec\xc3\x3f\xee\x03\xd0\x07\xee\x6b\xb8\xea\xfb\x2c\x5d\x07\x41\xef\x26\x89\x0a\x2d\x25\x16\xde\x8d\x5c\x7d\x3d\x0b\x1d\x7c\xcd\x3d\x14\xba\x31\x14\x18\x57\xc0\xcb\x72\xd4\x93\xc1\xbd\xbf\x74\x04\xd6\x20\x57\x9e\xe4\xdb\x20\xb4\x0e\x4b\xd2\x89\x43\x8d\xd2\xa0\x05\xe7\x6d\x5b\xf8\x9c\xa6\x87\xa3\x96\x4f\x12\xca\x6b\xe0\x04\xe7\x84\xda\x4a\x04\xc3\x2d\x6f\xd0\xa3\xa5\x52\xa2\xf1\x7b\x05\x3c\x66\xc8\xe6\x20\xfc\xa5\xa3\xc3\xaa\x56\x06\xa5\xab\x56\x15\xa4\xe2\x40\x59\x21\x09\xad\x41\x9b\x50\xd1\xa0\x69\xaf\x41\x7b\x35\x1e\x48\x80\x1b\xee\x84\x63\xf0\x4f\x6d\x01\x9f\x79\x63\x24\xe6\x70\xd0\x2d\x34\x62\x5b\x7b\x30\xdc\x51\x96\x67\x52\x11\xc1\xe9\xa0\x78\x8e\xb1\xba\x6c\x0b\x0c\x32\x70\x05\xb5\xf7\x86\xfd\x9b\xab\x52\x12\xc7\xbd\xf0\x35\x20\x2f\xea\xa1\x58\x61\x35\x9e\xbe\x86\xbd\xb0\x58\x42\x6b\x22\xa8\x33\x58\x88\x4a\x14\x60\xb8\xaf\x19\xac\xee\x03\x3f\xe1\x08\x7f\xc3\x37\xf2\x00\x1c\x1a\xe1\x7c\x2c\x74\x28\xd1\x89\xad\xa2\xad\x42\xed\xf4\x13\x06\x29\x1f\x62\x5a\xa6\xc6\x08\x14\xf1\x34\xd9\x31\x19\x04\x31\x2a\xc9\xd6\x73\x75\x0b\x29\x50\xf9\x53\x75\x67\x89\x3b\xf6\x98\x3c\x50\x27\x46\x38\x2c\x7f\x94\x46\xea\x86\xa8\x95\x20\x85\x1b\x8c\x65\x75\xe4\x2b\x94\x47\x5b\x71\x2a\xa8\xe5\x4c\x10\xd8\x74\xd8\x72\x9f\xb7\x2e\x3a\xd2\xd0\x58\xd7\x21\x0f\xef\x70\xff\x7a\x88\xa7\xd0\xcd\x46\xa8\xa0\x53\x33\x50\x9c\x25\x36\x1f\xdc\xc0\xb7\x56\x81\x08\x95\x4c\x04\x0b\x2e\x25\xda\x58\xcc\x03\x59\x96\x86\x70\xce\x04\xed\xd2\xae\xb3\x5c\x6d\x11\x2e\x04\xdc\xdc\x02\x1b\xd7\xbf\x8d\xc9\xe8\xfb\x34\xe9\xba\x0b\xc1\xde\xf1\x06\xfb\x7e\xdc\x0f\x00\x53\x10\x6c\x1c\x4c\xbb\xee\x8a\x46\xfb\x3e\xed\x4f\x7b\xf5\x27\x0e\xa1\xea\x84\xd5\x8c\xe1\x1a\x66\xe7\xae\x0a\xff\x0c\x83\x8f\xb0\xd7\xf1\x77\x4e\xd5\xf0\xd2\x6c\x58\xd7\xfd\x4b\xd3\x32\xb8\x10\xec\x63\x74\xc9\xc7\x83\xc1\x61\xeb\x1a\x56\xe7\x8b\xa2\x7d\xce\x56\xe5\x80\xd6\x6a\xbb\x86\x2e\x4d\x92\xd1\x5e\xc3\x20\x11\x46\xb6\xa0\x01\x71\x22\x0e\xeb\x34\x49\x44\x15\x96\xbe\xb8\x05\x25\x64\xc0\x48\x86\xac\x28\x21\x03\x4c\x9a\x24\x7d\x3a\x8d\x8e\x27\xb0\x9f\xe1\xb6\xce\x09\x25\x4d\xfa\xb4\xeb\xa2\xbc\x24\xee\x5b\x6a\xa9\xb9\xc2\xa1\x69\x2f\x3c\x06\x85\x63\xde\xe6\xa2\x5f\x78\x5c\xd2\x3d\x0a\x4f\x60\x4b\x21\x3a\x08\xf4\xe6\x7b\xe3\x8a\x87\xd0\x83\xeb\xf3\x22\x38\x09\x9e\xb0\x97\x53\x37\xde\x66\x53\x0f\x75\x94\xa8\xe9\x5e\x9b\x0d\xc7\x24\xcc\xb2\x43\xe8\x5f\x29\xa2\x01\x63\x49\xc3\xb3\x22\x08\xfb\x76\x53\x42\x1d\xfb\xa6\xb8\x02\xa3\xb8\x6a\x21\x97\x4b\xd9\x8c\xf9\x9c\x66\x76\x43\x92\xe2\x70\x50\x3f\xe6\x6a\x9e\xb3\xff\x5b\x6e\xfe\x2e\xe5\xdd\x73\x81\xc6\xc3\xde\x72\xe3\xa2\xcd\x4e\xea\x55\x02\x65\x49\x77\xcc\xd0\x9f\xc7\x86\x0d\xe9\x0d\xfe\xb4\x70\x71\xb2\xb7\xa2\x2c\x25\xee\xb9\x8d\xef\x97\xff\xba\xf1\x45\x43\x77\xb9\x31\xf2\x40\x36\x43\xd6\xe9\x09\xbc\x99\x56\x87\xbb\x01\x77\x68\x0f\x53\x2a\xa9\xad\xc8\x45\xc6\xdb\x92\xf0\xde\x1b\xba\x39\xc8\x3d\xf3\x99\x79\x15\x5c\xd1\xcd\x49\xf7\x0d\x96\xb4\x6d\x73\x00\x45\x39\x88\x37\x2a\x3e\x17\xb2\x2d\xb1\x8c\x8f\x99\x0d\x12\x05\x8a\xd9\x60\xc9\xce\xd4\x58\x1d\x39\xe5\x90\x3d\x78\xee\x5b\x97\xe5\x90\x7d\x10\x6a\x9b\xad\xd3\xd1\x1e\x5e\xce\xfc\xe1\x7b\xfb\x61\x41\x95\xfc\xc8\x86\x31\xe6\xbc\x15\x6a\x1b\xca\x49\xa8\x61\xf8\xe6\x16\x1a\x6e\x3e\xc5\xa9\xcf\x51\xfe\xae\xa7\xf4\x93\xad\xfd\x96\x7d\x25\x49\x36\xab\xa8\xec\x06\x26\x80\x3e\x1f\x20\x62\x19\x24\x7d\x9a\x26\x94\x95\x2f\x44\x29\x94\x71\x80\x9e\xe8\x75\xd1\x4e\xbe\xe4\xa0\x9f\x68\x7a\x24\xf8\x09\x9f\x3f\xbf\x82\x17\xfa\x29\x96\xa4\xe1\x4a\x14\xab\xaa\xf1\xec\xc1\x58\xa1\x7c\xb5\xca\xee\x46\x88\x29\x93\x97\x7f\x73\x97\x50\x6a\x74\xa0\xb4\x07\x7c\x16\xce\xbf\x02\x87\x38\x2f\x80\xa9\x86\x1c\xdb\xea\x8c\x48\xad\xd7\x83\x59\x95\x28\xd1\xe3\x6a\x64\x10\xe6\x8e\x01\x08\x55\xe4\xf0\xe5\x18\xc1\xa4\xe4\xcf\x6b\x26\x2a\xda\x05\xb7\xb7\x70\xa2\xde\xd0\x74\x8b\xae\x0b\xb7\x33\xf2\xab\xc5\x25\xeb\xb1\x0b\x4f\x54\x8f\x1d\xf8\x1f\xbe\x41\x89\xe5\xb1\x30\xe2\x77\xc0\x16\xfd\x58\xc6\xf3\xc7\x5d\xac\xe6\x7d\x8d\x6a\x9a\xd5\xb3\xca\x1d\xc0\x62\x01\xe6\xb1\xe1\x86\x9e\x68\xe3\x62\x88\x1f\x17\x3c\x7e\xa1\x88\x82\xde\x38\x56\x14\xf1\xf1\x39\xe3\x50\x8b\xa2\x0e\x5b\x1d\xaa\x25\x0a\xc3\xc5\x3e\xec\x1e\x9f\x35\xda\x0e\xd7\xfa\x79\x54\xc1\x79\x63\x2d\xe7\xe7\x26\xbd\xe0\xdb\xe9\xf7\xe2\xfa\xc3\x36\x75\x46\x2a\x1f\xe2\x0c\x8a\x5b\x2c\x50\xec\xe2\x03\x30\x84\xf8\xcd\xbb\x9a\xc1\x03\xe2\x04\x33\x43\x09\x13\xe3\xbb\x74\xb2\x00\x22\x4a\x45\x59\xa2\xe7\x42\x86\x37\xe4\xd8\x51\xe1\xf3\x64\x78\xfb\x72\x29\xfc\x81\xfd\xc8\x4d\x4e\x62\x9f\x9b\xca\xef\x56\xf4\x2f\xcb\xf9\x53\x5a\xce\xc9\xb6\x7c\xf9\x69\xf8\x3d\x07\xfa\x35\x00\x00\xff\xff\x9a\x16\xde\x59\xb0\x10\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4272, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x60, 0x30, 0x93, 0xa5, 0x9f, 0x65, 0x43, 0xe2, 0x5b, 0x4b, 0xe, 0x33, 0x90, 0xa8, 0x3b, 0x7b, 0x3f, 0xbe, 0xbc, 0x3f, 0x60, 0x73, 0x30, 0x1, 0x4, 0x4c, 0x5f, 0x3d, 0x95, 0x45, 0x5f, 0x38}}
	return a, nil
}

var _svcMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\x4d\x6f\xdb\x38\x13\x3e\x8b\xbf\x62\x5e\x21\x2f\x56\x2a\x14\x0a\xe8\x65\x81\x14\x39\xa5\xed\x6e\x81\x34\x2d\x1a\x63\xef\xb4\x34\x96\x89\x48\x24\x4b\x52\x76\xb2\x82\xfe\xfb\x62\x28\xd9\xa6\xe5\x04\x58\xf4\xb8\x07\x41\x12\x39\x9f\xcf\x33\x33\x64\x59\xc2\x9d\xae\x11\x1a\x54\x68\x85\xc7\x1a\xd6\x2f\xe0\x6d\xef\x1c\x87\x8f\xdf\xe0\xe1\xdb\x0a\x3e\x7d\xfc\xb2\xe2\xac\x2c\xe1\x07\xda\x5e\x29\xa9\x9a\x49\x00\xf6\xb2\x6d\x41\xef\xd0\xee\xad\xf4\x08\x7e\x2b\x1d\x6c\x64\x8b\x41\xf8\x2f\xb4\x4e\x6a\x75\x03\xc3\xc0\xe7\xef\x71\x8c\x36\xe0\xa3\xf0\x18\xef\xd2\xff\x38\x32\x66\x44\xf5\x24\x1a\x04\xb7\xab\x18\xc9\xaf\x0e\x66\xa1\xd2\xca\x0b\xa9\x1c\x74\xb2\xae\x5b\xdc\x0b\x8b\x0e\xf6\x56\x18\x43\x31\x09\xab\x7b\x55\x03\xaa\xda\x68\xa9\xbc\x83\x8d\xd5\x1d\x38\xb4\x3b\x59\xa1\x2b\x18\x93\x9d\xd1\xd6\x43\xc6\x92\x94\x2c\xe1\xb3\x4f\x59\x92\x6e\xba\xf0\xf2\xb2\xc3\x94\xb1\x24\x6d\xa4\xdf\xf6\x6b\x5e\xe9\xae\x6c\xf4\xf5\x93\xf4\x25\x3d\x07\xab\xe9\x9b\x12\xad\x6e\xde\xde\xec\xd0\x5b\x59\xb9\x94\x25\x7f\x4b\xf3\x24\x15\xc4\x72\xda\xa0\x9a\x96\xcb\xe9\x75\xdd\xe8\x85\xa9\xd7\x44\xca\x4e\xd7\xd8\xa6\x2c\x31\xeb\x33\x73\x4e\xac\x95\x78\x7a\xff\xfe\xf7\x72\xa3\xdb\x56\xef\xaf\x67\x08\x4a\xb3\x4e\x59\xce\xd8\xa6\x57\x15\x7c\x51\xce\xdb\xbe\x43\xe5\xa5\x6a\xbe\x1e\xe1\xcc\xea\xde\x0a\x4f\xec\xcc\x11\xf3\x3f\xa5\xf3\xba\xb1\xa2\xcb\xe1\x5e\xac\xb1\xc5\xfa\x24\x0d\x03\x4b\x2c\xfa\xde\x2a\x20\xa3\x99\x12\x1d\x82\xf3\x56\xaa\xa6\x00\xa9\x8e\x54\xf0\x4f\xf3\x47\x7e\xb9\x44\x36\xce\x8c\x54\xfe\x19\x66\x7a\xf8\xdd\xf4\x2e\xc0\xe2\x4f\x90\xca\xa3\xdd\x88\x0a\x87\x31\x87\xcc\x3a\x13\xaf\x14\x80\xd6\xd2\xa3\x6d\x1e\x4c\x26\x35\x6e\xd0\x4e\x26\xd7\xd8\x48\x05\xc4\x30\x5f\xc9\x0e\x67\x81\xe4\x90\x2b\xff\xb6\x26\x88\x30\x0b\x12\x8f\x52\x55\x38\xa9\xe4\xfc\x11\x2b\xad\x6a\x97\xe5\x39\x69\x8c\x93\xc4\x83\xde\xcf\x0b\x73\xdc\x52\x51\xd4\x21\x4a\x5a\x1e\x59\x32\xb2\x71\x06\xfa\x5e\x37\xcd\x39\xc4\xad\x6e\x1a\xb4\xd0\xea\x86\xdf\x87\xcf\xff\x1e\xb2\x53\x8a\x94\x5e\x96\x1e\x3b\xa7\x00\xca\xa2\x80\x54\x2a\xd3\xd3\xaf\xc5\x9f\x05\xa4\xba\xf7\xf3\xaf\x33\x05\xa4\x68\x6d\x1a\x5c\x16\x90\x7a\xad\x9f\xd2\x02\x2e\x68\xf9\x15\x32\x68\x92\x44\xf8\xd6\xe8\x2a\x2b\xd7\xe8\x40\x1c\x46\x04\x64\xc2\x81\x36\x46\x3b\xac\xc1\xeb\x23\xa0\x79\x34\x6e\x38\xf3\x2f\x06\xe1\x73\x68\xac\xc7\x49\x2f\xb2\x1a\x30\x31\x6b\x7e\xda\x27\x76\x17\x0b\x73\x61\xac\xac\xa8\xce\x0b\xc3\xc3\xbb\xa9\xb9\x39\xed\x91\xe6\x5b\x7e\x96\xd5\x81\xcf\x7e\xe9\xe5\xc2\x6d\x5c\x0e\x7e\xe9\x3b\xd0\xe6\x83\xd7\x1b\xf0\x05\xfd\x91\xd1\x1b\x00\xa0\x77\x11\x01\x59\x96\x97\xea\x20\x3b\xd3\x22\x4d\x13\x77\xe1\x56\x2a\xd0\xb6\x46\x0b\x5e\x93\x2e\x0a\x27\xdb\x97\x60\x02\x89\xa3\x1e\x9d\x77\xe0\xb7\x56\xf7\xcd\x56\xf7\x1e\x04\xd4\x92\x2a\x7d\xdd\xd3\x61\xe4\x5e\x9c\xc7\x6e\x86\xfd\xd2\x2f\x0d\xb1\x2a\x54\xfa\x14\xfc\x02\x41\x16\xb2\x00\xb8\xa0\x80\x0a\x62\x18\xf6\xd2\x6f\xe1\xca\x23\xdc\xdc\x02\x87\x71\x64\xc9\x30\x58\xa1\x1a\x84\x2b\x49\x6b\x57\x1e\xf9\x0c\x3e\xff\x8a\x7e\xab\x6b\x47\x42\x49\x59\xc2\x30\x5c\x49\xfe\x20\x3a\x1c\xc7\x45\xf2\xc3\x10\xab\x4d\x22\xf3\xdf\x19\x16\xc1\x8c\xb1\x7a\x27\x6b\x3c\x4b\x79\xce\x12\x76\xd2\xc9\xb5\x6c\xa5\x7f\xe1\x2c\x49\x42\xcd\x64\xbe\xbb\x04\x21\x8f\x83\x79\xbb\xc9\xdf\x85\xd8\xfe\xd0\x24\x07\x57\x92\xff\x98\xb0\x5f\xbd\x98\x43\x94\xd4\xfb\xe8\x5e\x11\x74\x46\x2b\x87\x91\x64\x3c\x13\x42\xe9\x84\xf9\x69\x1f\x8d\x50\xc5\x44\x6d\x7d\xe7\x9f\x09\x42\x67\x84\xba\xb3\x28\xbc\xb6\x53\x5b\xfa\x8e\x4f\x54\x15\x90\x46\x71\xa7\xf9\x69\xb2\x9c\x8c\xf1\xcf\x52\x49\xb7\xcd\xe2\x4d\x23\xd4\x0f\xac\xe8\xd6\x81\x36\x3b\xfa\x2a\x20\x0e\x61\x61\x79\x9a\x0e\x6e\x8a\xfa\x96\x42\xa0\xb2\xe0\x31\x6c\x91\xa1\x79\x70\x24\xe4\x69\x1a\xd0\xff\xca\x4d\xb0\x1e\x0d\xa2\xa9\x65\x86\x01\x55\x3d\x8e\x6c\x18\xae\x61\xfa\xa2\x26\x88\x50\x81\x8a\xde\x61\x0e\x29\xdc\xcf\x7d\x41\xfb\x71\x4f\xf8\x2d\xbe\xda\x15\xa1\x28\x16\x10\x5f\xb2\xbf\x9c\x2b\x05\x1d\xee\x5b\x5d\x3f\x9c\x0e\x95\x1c\xb2\x59\x64\xca\x6c\x61\x23\xcc\xf5\x9d\xb0\xe0\x2a\x08\xb7\x8e\x20\x36\x6f\xb2\xc4\x08\x8b\xca\xd3\x12\x51\x1e\x19\xfa\x6c\x75\x37\x4b\x51\x68\xf9\x07\x96\xc8\x0d\x44\xe2\xff\xbb\x05\x25\xdb\x30\x9a\x5c\x05\xb7\xd1\xd6\xc1\x35\x71\x3f\xb2\xc4\x19\x32\xed\xf9\xa3\x17\x36\xec\x67\xa7\x1c\x8a\x83\xcb\xef\x41\x3b\x73\x55\x4e\x9c\x13\x16\xc7\x68\x1e\x70\x1f\x05\x52\x80\x33\xf9\x71\x86\xd2\xb9\x53\xf9\x67\x76\xe2\xe6\xfe\x78\x44\x3b\x70\xba\xa3\xc6\xdd\x68\xdb\x4d\x37\x23\xa9\xbc\x0e\x8c\x04\x96\x26\xfa\xea\x13\x15\x73\xc9\xbc\xca\x44\xd0\x38\x03\xfa\x82\x89\xe5\x71\x4b\x2a\x7c\x25\x9a\x2c\xfd\x7a\x14\x4d\x63\xbd\x3c\x60\x4a\x4a\x31\x98\x47\xad\x4f\x64\x69\x2a\x4e\x1e\xbe\xc3\x69\x39\x46\xc9\x1e\xbb\x09\x3c\xb6\xad\x83\xde\x9d\xa5\xbb\xdf\x22\xd5\x22\xd2\x94\xa7\x2a\x35\x42\xc9\x0a\x74\x55\xf5\xd6\x9d\xb2\x3e\xb5\xe4\xaf\x26\x1e\xb2\x95\x1b\xb0\x44\xb4\x9d\xcc\x65\xf9\x07\x38\xcb\xab\x2c\x61\x8f\xbf\xed\x10\xb6\xa2\x3e\xc4\x52\x04\x69\x5b\xc3\x4e\x0a\xa0\x8b\xf2\x3c\x21\xcf\x60\x78\x1b\xbc\x48\xe8\x3b\x99\x4b\x0b\xd8\x74\x9e\x3f\x1a\x2b\x95\xdf\x64\xe9\xff\x77\x74\x37\x39\x80\xf6\x4f\x00\x00\x00\xff\xff\x5b\xe7\xac\xfc\x2f\x0d\x00\x00")

func svcMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcMiddlewaresGotemplate,
		"svc/middlewares.gotemplate",
	)
}

func svcMiddlewaresGotemplate() (*asset, error) {
	bytes, err := svcMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/middlewares.gotemplate", size: 3375, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0xe, 0x45, 0x1e, 0x4a, 0xbd, 0xb1, 0x91, 0x75, 0x15, 0xa3, 0xc2, 0x1b, 0x60, 0x13, 0xf1, 0x3c, 0x7e, 0xfd, 0x23, 0xb1, 0xdb, 0x82, 0x12, 0x9c, 0x4d, 0xc3, 0x89, 0xff, 0x4d, 0x83, 0x74}}
	return a, nil
}

var _svcServerEndpointGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6f\xdb\x30\x0c\x3d\x4b\xbf\x82\x08\x7a\x88\x87\x56\x3e\xec\x16\x20\x87\x75\xed\x80\x02\x6d\x5a\xac\xc1\x7a\x56\x2c\xd6\x11\xa2\x48\x86\x24\xc7\xeb\x04\xff\xf7\x41\xfe\x8a\xdd\xb4\xc1\x76\x08\x62\x93\x14\xdf\xd3\x7b\xa4\xd3\x14\xbe\x1b\x81\x90\xa3\x46\xcb\x3d\x0a\xd8\xbc\x81\xb7\xa5\x73\x0c\x6e\x1e\x61\xf5\xb8\x86\xdb\x9b\xbb\x35\xa3\x69\x0a\x3f\xd1\x96\x5a\x4b\x9d\xb7\x05\x50\x49\xa5\xc0\x1c\xd0\x56\x56\x7a\x04\xbf\x95\x0e\x5e\xa5\xc2\xa6\xf8\x17\x5a\x27\x8d\x5e\x40\x08\xac\x7b\xae\xeb\x51\x02\x6e\xb8\xc7\x71\x36\xbe\xd7\x35\xa5\x05\xcf\x76\x3c\x47\x70\x68\x0f\x68\x29\x95\xfb\xc2\x58\x0f\x73\x4a\x49\x9a\xc2\x57\x01\x4f\xdc\xfa\x37\x4a\x66\xb9\xf4\xdb\x72\xc3\x32\xb3\x4f\x73\x73\xb5\x93\x3e\x8d\x3f\x65\xf2\x19\x25\xce\x8b\x3f\xb2\xd8\x49\x0d\xe3\x32\x53\xa0\x6e\xc3\x69\xfb\x77\x95\x9b\x59\xdb\x77\x1d\xc9\x3f\xa3\x3d\xc8\x0c\x29\x29\x36\x30\x0b\x81\x3d\x5d\xdf\x35\xe0\x4f\xdc\x6f\xe1\xaa\xae\x67\x94\xc4\xf0\x34\x08\xa9\x3b\x64\x9f\x64\xb6\x5c\x0b\x85\xd6\xcd\x68\x42\xe9\x6b\xa9\x33\x58\x61\x75\xab\x45\x61\xa4\xf6\x6e\xae\x4c\x9e\xa3\x05\x65\x72\x76\xdf\x3c\x5e\x42\xcb\x6b\x6d\x79\x86\x16\xbe\x0c\xd7\x60\x6d\x24\x01\x77\xc8\xd8\xd0\x00\x42\xc3\xfd\xba\x74\x52\xa3\x73\x20\xcc\x9e\x4b\xcd\x28\x39\x70\xdb\xe8\x27\x33\x84\x62\xc3\x42\x60\xdd\xd5\xd8\x8a\xef\xb1\xae\x9f\x5b\x6d\x49\xa0\x84\xf4\x75\x4b\xe8\xd9\xb2\x15\x56\x5d\x7d\x47\x71\xca\x2b\xa1\x24\xc2\xbe\x58\x5e\xf4\x92\x41\x25\xfd\x16\x04\xbe\xf2\x52\x79\xd8\x4b\x21\x14\x56\xdc\xa2\x63\xf0\x8c\x18\x59\xa7\xe3\x60\x6e\x26\xc0\x95\xe5\x45\x0f\xd8\x45\x3f\xc5\x38\xe9\xdd\xb3\x3e\x07\x30\xdc\xec\xe5\x43\xa4\xba\x9d\x81\x5e\xd7\xa9\x8e\x73\x4a\x42\xb0\x5c\xe7\x08\x17\x12\x16\x4b\x18\xb4\x7c\x40\xbf\x35\xc2\x45\xab\x29\x21\x21\xac\xcd\xbd\xa9\xd0\xc2\x85\xec\x64\x1e\x1a\x2e\x1b\xdf\x1e\xf8\x0e\x43\x38\xc9\x8e\x88\x84\x80\x5a\xc4\x6e\x09\xa5\x04\x07\x9b\x17\xcb\xa9\xef\xe1\x9f\x29\x9d\x80\x2d\x00\x00\xce\x50\xbd\x1c\x91\xe8\x64\x69\x3c\xf8\xc0\x5a\x1a\x5b\x1d\x49\xb6\x36\x1e\x87\x7b\xc8\x24\x4d\x61\xdf\xc8\xa1\xc2\x2c\x7e\x67\x8e\x53\xfc\x7f\xbe\xbe\x47\x9d\x78\xfb\x21\x3c\x25\x16\x7d\x69\xf5\xf1\x18\xad\xbb\x75\x9c\x52\x96\x7a\xaa\xf3\xe9\xba\x51\x22\x75\x03\xf4\x4d\xa9\x7b\xbe\x41\x85\xe2\xf6\x77\x86\x85\x9f\xc7\xca\x3b\xed\xbc\x2d\xf7\xa8\xbd\xd4\xf9\xc3\x40\x7b\x2e\x4a\x9b\x24\xe7\x8f\xc6\xfd\x9f\x1e\x6a\x37\x2f\x19\xd1\x97\x7a\xc2\xbb\x9f\x63\xa9\xe3\x8e\xff\x30\x4a\x99\xaa\x5d\xec\xe4\x7d\x20\x7e\x28\xa4\xee\xc6\x30\x2e\xf1\x14\x6a\xb2\xdc\x73\xa9\x93\x09\xe4\xdf\x00\x00\x00\xff\xff\x30\xb6\x77\x0f\x23\x06\x00\x00")

func svcServerEndpointGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerEndpointGotemplate,
		"svc/server/endpoint.gotemplate",
	)
}

func svcServerEndpointGotemplate() (*asset, error) {
	bytes, err := svcServerEndpointGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/endpoint.gotemplate", size: 1571, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x75, 0x7b, 0xe5, 0x15, 0xab, 0x54, 0xe1, 0xcf, 0x20, 0x2d, 0x2c, 0xbb, 0x37, 0x7b, 0x7b, 0x1c, 0x31, 0xa6, 0x6f, 0xb3, 0xba, 0x2c, 0x45, 0xdb, 0x1a, 0xa4, 0xbe, 0x56, 0x38, 0x7a, 0xd8, 0x55}}
	return a, nil
}

var _svcServerRunGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x7b\x6f\xdb\xc8\x11\xff\x9b\xfc\x14\x13\x02\x2d\xa8\x42\x26\x93\xf6\xae\x0f\xf5\xf4\x47\x4e\x72\x12\x03\x71\x22\xc8\xca\x15\x68\x51\x18\x6b\x72\x48\x2d\xbc\xdc\x65\x77\x97\x72\x1c\x41\xdf\xbd\x98\x5d\x52\x24\x75\xf1\xeb\x5a\x01\x89\x56\xf3\xf8\xed\xbc\x38\x33\x74\x9a\xc2\x42\xe5\x08\x25\x4a\xd4\xcc\x62\x0e\x37\xf7\x60\x75\x63\x4c\x02\xcb\xcf\xf0\xe9\xf3\x06\xce\x97\x17\x9b\x24\x4c\x53\x58\xa3\x6e\xa4\xe4\xb2\xf4\x02\x70\xc7\x85\x00\xb5\x43\x7d\xa7\xb9\x45\xb0\x5b\x6e\xa0\xe0\x02\x9d\xf0\x2f\xa8\x0d\x57\x72\x06\xfb\x7d\xd2\x9e\x0f\x87\x01\x03\x96\xcc\xe2\x90\x4b\xbf\x0f\x87\x30\xac\x59\x76\xcb\x4a\x04\x83\x7a\x87\x3a\x0c\x79\x55\x2b\x6d\x21\x0e\x01\x00\xa2\x42\xb0\x32\xf2\x47\x65\xda\x43\x51\xd9\x28\x0c\x22\x89\xdd\x57\xba\xb5\xb6\x1e\x9e\xd3\xba\xd6\xaa\x88\xc2\x30\x48\x53\xf8\x53\x0e\x2b\xa6\xed\x7d\x18\x44\xa5\x52\xa5\xc0\xa4\x54\x82\xc9\x32\x51\xba\x4c\x4b\x5d\x67\xa4\x59\x72\xbb\x6d\x6e\x92\x4c\x55\x69\xa9\xce\x6e\xb9\x4d\xe9\x9f\x50\xdd\xe5\xdf\xe7\x57\x68\x35\xcf\xcc\x73\x64\xd2\x5a\xab\x0a\xed\x16\x9b\x56\xdc\xd8\xfc\x1b\xaf\x6f\xb9\x1c\x29\xaa\x1a\xa5\x27\xa7\xfe\xeb\xac\x54\x5e\xde\xff\x24\xef\x9e\x54\x48\x35\x52\x0c\x51\xb7\x81\x69\xaf\xeb\x2d\x18\x21\xf4\xe4\x34\x13\x1c\xa5\xbd\xf6\xf1\xf9\x95\xc5\x2f\x54\x72\x47\x6f\x80\xcb\xc3\x86\xea\xe5\x0a\xf5\x8e\x67\x18\x06\xf5\x0d\x44\xfb\x7d\xb2\xfa\xf9\xc2\xe5\x7b\xc5\xec\x16\xce\x0e\x07\xca\xc5\x7e\x9f\x8c\x89\x90\x9a\x5d\xf6\x00\x67\xcb\x64\x2e\x50\x9b\x28\x9c\x84\xe1\x8e\x69\x88\xc3\x60\x89\x05\x6b\x84\x5d\x28\x59\xf0\x12\xfc\x57\x18\x08\x55\x96\xa8\xa1\xfd\x08\x55\x26\x1f\x1d\x25\x0c\xf2\xe6\x48\x06\x80\x36\x61\xc9\x07\x6e\xac\x2a\x35\xab\xc2\xc0\x47\x76\xa3\x59\x46\x00\x7f\x38\xa6\x2e\xf1\x24\xba\xba\x68\x64\x06\x5c\x72\x1b\x4f\x60\x1f\x06\x54\xb7\xc9\x95\xd5\x5c\x96\xbf\x30\x1d\xff\x7e\x64\x52\x72\xe9\xae\x78\x9b\xe7\x7a\x0a\x91\xbf\x2f\x61\x79\xae\xa3\x29\x44\xb3\x1f\x5f\xff\xe5\x35\x1d\xbc\x90\x01\xc1\x8d\x45\x09\xc4\x47\x63\xa2\xc9\x53\xe0\x4b\xbc\x69\xca\x16\x3b\xa7\xf3\x10\xfa\xcf\x0e\xda\x89\xbc\x18\xf8\xc3\x66\xb3\x6a\x71\x29\xad\x43\xd8\x1f\x1d\x2c\x09\xbc\x18\xf5\xfd\x7a\xb5\x68\x51\xe9\x61\x1c\xa2\xfe\xe0\x50\xcb\xf5\x6a\x01\x31\x61\x4f\x5e\x0c\xfe\x4f\x97\xa6\x2f\x5a\x4c\x21\x6a\x53\xd6\x68\x11\xb5\x1e\xcc\xd2\x54\xa8\x8c\x89\xad\x32\x76\xf6\xb7\x1f\xde\xbc\x49\x59\xcd\xd3\xdd\x1f\x53\x53\x33\x69\x48\xca\xeb\x03\xe9\x4c\x7c\x15\x7f\x31\x08\x28\x77\x5c\x2b\x59\xa1\xb4\xb0\x63\x9a\xb3\x1b\x81\x66\x0a\xbc\x00\x83\x36\x81\x77\x82\x95\x06\xb6\x6c\x87\x50\x6b\xae\x34\xb7\xf7\xae\x6d\xc2\xb9\xdc\x91\xbc\x49\xc2\x80\x17\xce\x09\x98\xcd\x41\x99\xe4\x3d\x5a\x94\xbb\x38\x5a\x9e\xff\xfc\xe5\xfd\xf5\xdb\xe5\x72\x1d\x4d\xfe\xee\x05\x5e\xcd\x21\x8a\xa8\xa2\x82\x07\xb2\x0c\x73\x27\x18\x06\x87\x87\x50\x2f\xcf\x37\xeb\x8b\xc5\xf3\x60\xfb\xca\x3c\xc1\x75\x4d\x79\x8c\xbb\xfa\xbc\xde\x10\xa0\x63\x3d\x04\xd8\x15\x0d\xcc\xa1\xa8\x6c\x72\x55\x6b\x2e\x6d\x11\x47\xb3\xdf\x51\x80\x49\x75\xf2\x88\xe9\xa4\xfd\x3c\xc3\x07\xf7\x3c\x11\x0e\x2a\xb8\xe7\x61\x76\xa5\x39\xc0\x3c\x84\xa1\x1b\xa1\xae\xb3\x64\x4a\x5a\xc6\xa5\x01\xbb\x45\xd0\xf8\x9f\x86\x6b\xcc\xa1\xe0\x28\x72\x03\x85\xd2\xd0\xcd\x4f\xd6\x4d\x37\x7b\x5f\x63\xa7\x6d\xac\x6e\x32\x4b\xd7\x1e\x6d\x37\xae\x8e\xa9\x81\x75\xc9\xed\x28\x83\xbc\x74\xa4\xa3\x75\x1d\xe1\x58\xec\xd0\x91\xbc\xb5\xeb\x46\x82\xb1\x4c\x5b\x03\x0c\x24\xde\x81\x1b\x22\xde\xa2\x29\xb8\xc7\xab\xfb\xc1\x64\x0e\x0c\x5c\xd7\x68\x69\x70\xc7\xed\x96\x1c\x24\xa4\x9a\x19\x83\x39\xf9\x4d\x0e\x90\xb0\x6f\xaa\xbe\xfb\xad\x1b\x19\x67\x45\xd7\x70\xa9\x0d\x52\x3b\xa5\xac\xaf\x28\xe9\x42\xc6\xd1\xd9\x53\x9f\x68\xf2\x6b\xa5\x0b\xc9\x2d\x67\x82\x7f\xe3\xb2\xfc\x1e\xff\x39\xa0\x4e\xcb\x1b\xd4\x76\x7f\x9a\x05\x73\x37\x06\x3e\xe1\xdd\x47\x55\x16\x95\xf5\xf3\x20\x56\x26\xb9\xb2\x39\x6a\x3d\xf9\xbe\xfc\x3f\xb8\xdd\xc6\x9e\x32\x85\xc8\x52\x1d\x13\xb9\xad\x9d\x0d\xaf\xd0\x58\x56\xd5\x5f\x36\x8b\x67\x01\x64\x4c\x08\xd4\x63\x90\x85\xa3\x79\xf5\xc3\xa9\xf1\x34\xae\xe6\xd0\x0f\x5a\x72\xe0\xaa\xa9\x2a\xa6\xef\xdf\x69\x55\xc5\xa3\x51\x9f\xb4\x9c\xcf\xb5\x35\x3d\x04\x7d\x3e\xb1\x0a\x4d\xcd\x32\x9c\x41\x54\x28\x21\xd4\xdd\x35\x8d\xd9\xe9\x48\xe8\xaa\xb9\x31\xf7\xc6\x62\x35\x83\x88\xd5\xfc\x84\x4b\x10\x33\x7f\x8c\xa8\xfe\xd1\xd8\xeb\xbc\xd1\xcc\x72\x25\xaf\x0d\x66\x4a\xe6\xe6\x44\xe5\x03\x8a\xba\x53\xd9\x28\xcb\x04\x58\x5e\x21\x98\x9a\x9a\x29\x95\x1c\x3d\x2f\x2d\x96\x49\x06\xca\x87\x29\xfc\xeb\xdf\xbe\xae\xf7\x87\x07\x22\xe3\xe7\xff\xf0\x3a\xd4\x7a\x78\x56\x7a\xc4\xa5\xc6\xbf\xa2\xee\x05\x00\x73\x88\xfa\x61\xf0\xd7\xd7\xd1\x48\xd0\xf8\xb5\x85\xfc\x25\x41\x1f\xae\xb3\x96\x1a\x85\x41\x10\x74\x2b\x97\x87\xea\x97\x35\x4a\xce\xba\xe5\xd1\xd3\xd1\x8f\xa4\xbe\x38\xfa\x53\x8e\x05\x6a\xe8\xb0\x92\x85\x50\x06\xe3\x9e\xfd\xed\x7c\x35\x85\x6b\xea\x67\xfd\x0a\xf2\x09\xef\xce\x65\x5e\x2b\x2e\x6d\x3c\x30\x73\x7a\x74\x6e\xa0\x3e\x58\x63\xa6\x2e\x34\x27\x40\x9e\x15\x77\xf7\x4f\x07\x5c\xaa\xd9\x8f\x14\x9f\xe3\x65\xdf\xce\x57\x93\x1e\x9b\x17\x0e\xf0\xd5\x1c\x24\x17\x30\xae\x34\x5f\xea\xb4\x6e\xc5\x11\x6a\x2a\xf5\xd1\xc3\x45\x1f\x65\x92\xf3\xaf\xdc\xc6\x6f\x7a\xf2\x61\x98\xe3\xff\xbd\x8b\x2c\x95\x44\xf8\xbf\xb4\x92\x00\xdb\x10\x18\xca\xc4\x20\xfe\xe6\xf8\x50\x0f\x23\xdd\x2e\x0e\x97\x98\x6d\x99\xe4\x19\x13\x90\xab\x8a\x71\x99\x84\x01\x6a\x9d\x11\x46\xc5\x6e\x31\x26\xb6\xaf\xd1\x56\xe3\x42\x5a\xd4\xba\xa9\x2d\xb4\x4b\x6e\x12\x06\xa5\xea\x7e\x98\xe4\xc8\xff\xe0\x29\x31\xc1\xb5\xba\xc3\x0d\xaf\x53\xa4\x26\xed\xb7\xd3\x60\x98\x11\xab\x99\x34\x94\xf0\xa8\x5b\x18\xe9\xd0\xae\x61\x54\xb1\xc7\x69\x44\xd8\x41\x45\x06\x77\x95\x4d\xeb\x3c\x5e\x36\x5f\xe3\x09\x71\x12\x6f\x48\x1c\xa5\x0e\xc6\xbf\x85\xa5\xd1\xd4\x8b\xb7\x56\xbe\x23\x2b\x1c\x27\xb9\x90\x39\x7e\x9d\x3c\xa2\x9a\x55\xb9\xe0\x12\x1f\x46\x58\x78\x81\xc7\x30\xe8\x3f\x2e\x1e\xc1\x58\x79\x81\xc7\x30\xcc\x7d\x75\xa3\xc4\xc3\x10\x57\x8e\xff\x18\x82\xa5\x52\x78\x18\xc0\x55\xca\xc4\xc5\xd7\xd5\xc4\x4f\x67\x5e\xf2\xa3\x4b\xe0\x5b\x99\xbb\x40\xc7\xa3\x6c\x4c\xa1\xa2\xd5\x29\x3e\xd6\x17\x6d\x08\xbf\x21\xe5\xfe\xfd\xe3\x24\xe7\xfd\xbe\xf1\x44\xd2\xc7\x2e\x77\x2f\xc4\x53\xe8\x5e\xfe\x3a\x67\xe3\xe7\x79\x37\x7c\x33\x1a\xb9\xe7\xde\x2d\x8e\x76\x3f\xdf\x3b\xd2\x3b\xf1\xad\x5b\xb7\xc8\xfc\xad\x6b\xa6\xbb\x2c\xb9\x64\xb7\x48\x8c\xe3\xb3\xd4\x3d\xd3\xa7\x0f\xf3\xd3\x3e\xf4\xef\x49\xdb\xa1\x07\x6e\xd1\xfa\x0d\x1e\x90\xde\x89\x07\xdd\xea\x47\xd6\x08\xe9\x5b\xf9\x6c\x0e\x12\x6d\x6b\x4f\x1c\xd9\xac\xfe\x8e\xf0\x69\x97\x0e\x7a\x6f\x50\x6b\x3f\xc7\x6c\xa3\x65\x18\x04\x07\x4a\x97\xd1\xbb\x61\x80\x08\xca\xf9\xf9\x68\x7c\x5c\x5b\x74\xef\x72\x5d\xb1\x68\x57\x2a\xf5\x4d\xb2\xc6\x92\xec\xd3\xfb\x7d\xd2\xfe\x25\x20\xa1\x61\x75\x38\xb4\x62\x66\x0a\x46\xef\x46\x95\x62\x12\x1f\x59\x21\x87\xc1\x5c\x37\xf2\x55\x38\x8a\x19\x7e\xe5\x14\xae\x9f\xce\x7c\x17\x3c\x84\xe1\x7f\x03\x00\x00\xff\xff\x76\xaf\x59\xa6\xec\x12\x00\x00")

func svcServerRunGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcServerRunGotemplate,
		"svc/server/run.gotemplate",
	)
}

func svcServerRunGotemplate() (*asset, error) {
	bytes, err := svcServerRunGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/server/run.gotemplate", size: 4844, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0x24, 0x48, 0x60, 0xab, 0x6a, 0x52, 0xff, 0x7a, 0xf8, 0xfe, 0xd7, 0x9a, 0xf, 0x2e, 0x9d, 0xc9, 0x3a, 0x17, 0xba, 0xc3, 0x40, 0x60, 0xf4, 0x7d, 0x2f, 0x6, 0x63, 0x84, 0x17, 0x6d, 0xc6}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4f\x6f\xdb\xb8\x13\x3d\x8b\x9f\x62\x7e\x46\xf1\x83\x55\xd8\xd4\x9e\x03\xe4\xd2\xa4\xdb\x16\xbb\x6d\x82\xac\xd1\x3d\x14\x45\x41\x4b\x63\x89\xb0\x44\x2a\x24\xed\xc4\x25\xf4\xdd\x17\x43\xfd\xb1\x1c\x3b\x8e\x0f\x01\x62\xf2\xcd\xf0\xcd\x7b\xc3\xa1\x92\x04\x6e\x74\x86\x90\xa3\x42\x23\x1c\x66\xb0\xdc\x81\x33\x1b\x6b\x39\xdc\xde\xc1\xb7\xbb\x05\x7c\xbc\xfd\xb2\xe0\x2c\x49\xe0\x01\xcd\x46\x29\xa9\xf2\x16\x00\x4f\xb2\x2c\x41\x6f\xd1\x3c\x19\xe9\x10\x5c\x21\x2d\xac\x64\x89\x01\xfc\x1d\x8d\x95\x5a\x5d\x81\xf7\xbc\xfb\xbf\x69\x46\x1b\x70\x2b\x1c\x8e\x77\xe9\x77\xd3\x30\x56\x8b\x74\x2d\x72\x04\xbb\x4d\x19\xe1\x17\x7d\x5a\xa8\x8d\xde\xca\x0c\x2d\x58\x34\x5b\x34\x73\x2b\x33\x84\xa5\x54\x99\x54\xb9\x85\x95\x36\xe0\x0a\x84\xfc\xe1\xfe\x06\x9c\x11\xca\xd6\xda\xb8\xc0\xe5\x8b\x83\x8d\x93\xa5\xfc\x8d\x36\x40\x86\xdd\x24\x37\x75\xca\xff\x09\xe9\x38\x63\xb2\xa2\x45\x98\xb2\x68\xa2\xd0\x25\x85\x73\xf5\x84\x45\x93\x54\x2b\x87\xcf\x6e\xc2\x58\x34\xc9\xb5\xce\x4b\xe4\xb9\x2e\x85\xca\xb9\x36\x79\x48\x91\x54\xe8\x44\x26\x9c\x68\x31\xd2\x15\x9b\x25\x4f\x75\x95\xe4\x7a\xbe\x96\x2e\xa1\x3f\x67\x44\x2a\x55\x9e\xfc\x96\xf5\x5a\xaa\x09\x8b\x28\x70\x60\x02\xaf\x47\x8d\xa8\x4e\x58\x64\x5d\xd6\x66\x38\x88\xd0\x35\xaa\x76\xb9\xcb\x3f\xcf\x35\x71\xe9\xf5\xa3\x12\x65\x8a\x2c\xaa\x97\x30\xf1\x9e\xdf\x7f\xf8\x12\x6a\xbd\x17\xae\x80\x79\xd3\x4c\x58\x1c\xc4\xfe\x2a\xd6\xf8\xe9\xe1\xfe\xa6\x95\x04\x2a\xb1\x46\x0b\x02\x2c\x3a\xd0\x2b\x40\x95\xd5\x5a\x2a\x67\x41\x6c\x85\x2c\xc5\xb2\x44\x10\xb4\x1f\x34\xf7\x9e\x77\xc7\xf0\x6f\xa2\xc2\xa6\xe9\x75\x5d\x6d\x54\xfa\x22\xf3\x74\x9f\xea\x63\xff\xdf\x0c\x5a\xea\x0b\x23\x52\x34\xf0\x7e\xa8\x94\xb7\x2b\x33\xd0\xb5\x93\x5a\x59\xe0\x9c\x1f\x88\xd7\x39\x78\x17\xb6\x63\xa8\x97\xfc\x15\x2e\xe0\x59\x64\x47\x58\x0b\x57\xd7\xf0\xe3\xe7\xeb\xc9\x3c\x8b\xa2\x53\xbb\x1f\x70\xa5\x0d\x4e\x7b\xdb\x17\xfa\xa6\xed\x91\x78\xc6\xa2\xe6\xe5\x19\xd7\x20\xea\x1a\x55\x36\x3d\x58\x1e\xca\xe1\x9c\xc7\xec\xd2\x98\x4e\x91\xbd\x92\x41\x9b\xe9\x58\xb9\x98\xb2\x19\x74\x1b\xa3\xe0\xff\x44\xbe\x05\xfa\xd0\x0d\xde\xc3\x42\xff\xad\x9f\xd0\xc0\x81\x42\xd0\x34\x2c\xf2\xde\x08\x95\x23\xbc\x93\xa4\xcb\xb0\xff\x15\x5d\xa1\x33\x4b\x88\xc8\xfb\x3e\xfc\x9d\xec\xa4\xbd\x82\x43\x85\xbe\xe1\x53\x67\x32\x8b\xa2\x68\x30\x9a\x7b\x3f\x84\xf4\x9e\xcf\x08\x71\x8b\xa9\xce\x42\x6f\x8c\x10\x0f\xf8\xb8\x41\xdb\x02\x3e\xaa\x93\x00\x5b\x6b\x65\x31\x20\x0e\x44\xe2\x9c\xd3\x22\x59\xe1\xfd\x9c\x9a\x96\x98\x37\xac\x09\x1d\xbe\x17\x04\x64\x55\x97\x58\x21\x35\x21\x4d\x05\xef\x3f\xe9\x20\xc5\xe9\xd6\x91\xca\xa1\x59\x89\x14\x99\xdb\xd5\x38\xce\x63\x9d\xd9\xa4\x0e\x3c\x7b\x5b\xbf\x13\xf2\x01\xbc\xd0\xef\xb3\x50\x59\x89\x86\xed\xc9\xb7\xcc\xbb\x34\x61\xd0\x8d\x4e\x77\x7a\x5f\xc8\xe5\x35\xbc\x49\x35\x5c\xda\xa9\x85\xf7\xfb\xa3\xe2\x7d\xfa\x81\xfd\x34\x75\xcf\xd0\x0d\x48\xde\x5d\x82\x19\x18\x7c\x84\xf7\xe1\x1a\xee\xf1\x9d\xa3\x8b\x5d\xdd\x93\x8a\x61\x7a\x0c\x6a\x5d\x1d\xa1\x66\x80\xc6\x68\x3a\x9c\x45\xbf\x28\x75\x1d\x56\x88\x36\xf5\xd4\x91\x9e\xed\x0d\xa5\x6e\x21\x6e\x81\x4b\xcc\x22\xb9\x0a\x41\xff\xbb\x06\x25\x4b\x4a\xd5\xdf\x10\x25\xcb\x90\x2f\xdc\xdb\x6e\xcd\x60\xcd\x2f\xa1\x16\xcf\x28\x9c\x35\xcc\xfb\xd6\x28\xb2\xa9\x93\xba\xed\xea\xb7\x75\x4e\x12\x38\x77\x01\x40\xd2\x7c\x7d\xf1\x60\xb5\x01\x1d\xe2\x4f\x32\xca\x15\xc2\x91\x0d\x5b\x34\x34\x9d\x43\xa3\xb7\x33\xf9\xb8\xdf\x4c\x97\xd9\x69\x10\xb0\xb1\x68\xe6\x99\xae\x84\x54\xe7\xc0\x1c\xee\x8d\xac\x84\x91\xe5\x8e\x42\x56\x9b\x12\xa4\x0a\x0f\xc3\x68\xc4\x9f\xab\x63\xfa\xeb\xb8\x4b\xa8\x96\x07\x7c\xdc\x77\xa5\xa7\x96\x18\xfd\x1a\x5b\x4f\x2d\x75\x75\xdd\xc7\x9c\xb2\xe7\xa8\xbd\x46\x7e\x3e\x9e\x71\xaa\x1d\x2f\x17\x39\x75\x76\x12\x9d\xb4\xaa\x8d\xe8\x21\xaf\x79\xf5\xb6\x0b\xdd\x11\xc1\xb3\x33\xce\xd6\xe5\xee\x22\xab\xce\x16\x72\xca\xab\x81\xc1\x85\x66\xd9\x9a\x54\xec\xa3\x2e\xbb\x4d\x23\xbf\x6c\x7d\xca\xb0\xcf\x58\xd6\x68\x2c\x6b\x6b\x38\x7a\x7c\x4f\xcf\xa2\x2a\x1b\x90\xfc\xeb\x6d\xfc\x12\x40\x74\x69\xa2\xae\x67\xb0\x0d\x94\x43\x13\x54\x59\x98\x11\x72\x05\xdb\xf1\xcc\x68\xbf\xa7\x10\xd6\xb8\x0b\x6e\x67\x19\x7d\x30\x6b\x57\x90\xc4\xfd\x29\x34\xa0\x2b\xe1\x60\xba\x8e\xe1\xa9\x90\x69\x11\xa0\x65\x09\x25\xd9\xd5\x65\x11\x2a\x0b\x8f\x0e\x7d\x63\xf2\x1b\xa1\xb4\x92\xa9\x28\x3f\xa3\xc8\xd0\xfc\x85\x3b\xfa\xda\x72\xdd\x41\x56\xb7\x2d\x23\x1d\xa4\x42\xc1\x12\xfb\x14\x69\x8a\xd6\x62\x46\x67\xa3\x74\x05\x9a\xee\x64\xda\x27\x29\xae\x87\x5a\xff\x95\xae\xf8\x2e\xca\x0d\xb6\x23\x91\x6a\xfd\xf1\xc7\xcf\xf8\x4d\xe0\x2b\xec\xa6\xeb\x78\x9f\x21\xbc\xad\x83\x75\xa9\x7b\x66\x0d\xfb\x2f\x00\x00\xff\xff\xd9\xf1\x50\x86\x56\x0c\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 3158, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0xec, 0x15, 0x9a, 0x99, 0xe, 0xb0, 0x8c, 0x22, 0x47, 0xe6, 0x65, 0x97, 0x2, 0x79, 0xe6, 0x59, 0x77, 0xfb, 0x12, 0x54, 0x9c, 0x7e, 0x8, 0x1f, 0x86, 0x63, 0x12, 0xc5, 0x41, 0x55, 0x2d}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/NAME/main.gotemplate":          cmdNameMainGotemplate,
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/hooks.gotemplate":         handlersHooksGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/middlewares.gotemplate":        svcMiddlewaresGotemplate,
	"svc/server/endpoint.gotemplate":    svcServerEndpointGotemplate,
	"svc/server/run.gotemplate":         svcServerRunGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"NAME": &bintree{nil, map[string]*bintree{
			"main.gotemplate": &bintree{cmdNameMainGotemplate, map[string]*bintree{}},
		}},
	}},
	"handlers": &bintree{nil, map[string]*bintree{
		"handlers.gotemplate":    &bintree{handlersHandlersGotemplate, map[string]*bintree{}},
		"hooks.gotemplate":       &bintree{handlersHooksGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": &bintree{handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate":   &bintree{svcEndpointsGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": &bintree{svcMiddlewaresGotemplate, map[string]*bintree{}},
		"server": &bintree{nil, map[string]*bintree{
			"endpoint.gotemplate": &bintree{svcServerEndpointGotemplate, map[string]*bintree{}},
			"run.gotemplate":      &bintree{svcServerRunGotemplate, map[string]*bintree{}},
		}},
		"transport_grpc.gotemplate": &bintree{svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
